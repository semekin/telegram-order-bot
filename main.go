package main

import (
    "fmt"
    "log"
    "strconv"

    "telegram-order-bot/orders"

    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotState int

const (
    StateStart BotState = iota
    StateWaitingForProduct
    StateWaitingForAddress
    StateWaitingForPhone
)

type UserSession struct {
    State   BotState
    Product string
    Address string
}

type OrderBot struct {
    bot          *tgbotapi.BotAPI
    orderManager *orders.OrderManager
    sessions     map[int64]*UserSession
    dispatcherID int64 // ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

func NewOrderBot(token string, dispatcherID int64) (*OrderBot, error) {
    bot, err := tgbotapi.NewBotAPI(token)
    if err != nil {
        return nil, err
    }

    return &OrderBot{
        bot:          bot,
        orderManager: orders.NewOrderManager(),
        sessions:     make(map[int64]*UserSession),
        dispatcherID: dispatcherID,
    }, nil
}

func (b *OrderBot) Start() {
    u := tgbotapi.NewUpdate(0)
    u.Timeout = 60

    updates := b.bot.GetUpdatesChan(u)

    for update := range updates {
        if update.Message == nil {
            continue
        }

        b.handleMessage(update.Message)
    }
}

func (b *OrderBot) handleMessage(message *tgbotapi.Message) {
    userID := message.Chat.ID

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if b.sessions[userID] == nil {
        b.sessions[userID] = &UserSession{State: StateStart}
    }

    session := b.sessions[userID]

    switch session.State {
    case StateStart:
        b.handleStartState(message, session)
    case StateWaitingForProduct:
        b.handleProductInput(message, session)
    case StateWaitingForAddress:
        b.handleAddressInput(message, session)
    case StateWaitingForPhone:
        b.handlePhoneInput(message, session)
    }
}

func (b *OrderBot) handleStartState(message *tgbotapi.Message, session *UserSession) {
    switch message.Text {
    case "/start":
        b.sendWelcomeMessage(message.Chat.ID)
    case "üìã –ü—Ä–∞–π—Å":
        b.sendPriceList(message.Chat.ID)
    case "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        session.State = StateWaitingForProduct
        b.sendMessage(message.Chat.ID, 
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? –û–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞—à –∑–∞–∫–∞–∑:\n\n" +
            "–ü—Ä–∏–º–µ—Ä: 2 –±–∞–ª—Ç–∏–∫–∏, 1 —Å—É—Ö–∞—Ä–∏–∫–∏, 1 —á–∏–ø—Å—ã")
    default:
        b.sendWelcomeMessage(message.Chat.ID)
    }
}

func (b *OrderBot) handleProductInput(message *tgbotapi.Message, session *UserSession) {
    session.Product = message.Text
    session.State = StateWaitingForAddress
    
    b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
}

func (b *OrderBot) handleAddressInput(message *tgbotapi.Message, session *UserSession) {
    session.Address = message.Text
    session.State = StateWaitingForPhone
    
    b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
}

func (b *OrderBot) handlePhoneInput(message *tgbotapi.Message, session *UserSession) {
    phone := message.Text
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    username := message.From.UserName
    if username == "" {
        username = message.From.FirstName
        if message.From.LastName != "" {
            username += " " + message.From.LastName
        }
    }
    
    order := b.orderManager.CreateOrder(
        message.Chat.ID,
        username,
        session.Product,
        session.Address,
        phone,
    )
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    b.notifyDispatcher(order)
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    b.sendOrderConfirmation(message.Chat.ID, order)
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    b.sessions[message.Chat.ID] = &UserSession{State: StateStart}
}

func (b *OrderBot) sendWelcomeMessage(chatID int64) {
    text := `üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
    
    msg := tgbotapi.NewMessage(chatID, text)
    msg.ReplyMarkup = b.getMainKeyboard()
    
    b.bot.Send(msg)
}

func (b *OrderBot) sendPriceList(chatID int64) {
    text := `üìã–í –Ω–∞–ª–∏—á–∏–∏ –±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç. –ü–æ —ç–ª–∏—Ç–Ω–æ–º—É –∞–ª–∫–æ–≥–æ–ª—é –∑–≤–æ–Ω–∏—Ç–µ, –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–í–æ–¥–∫–∞:
5 –æ–∑–µ—Ä 0,5 1000‚ÇΩ, 1 –ª–∏—Ç—Ä 2000‚ÇΩ
–ü–æ–¥–ª–µ–¥–∫–∞ 0,5 1000‚ÇΩ, 0,7 1500‚ÇΩ, 1 –ª–∏—Ç—Ä 2000‚ÇΩ
–¢—É–Ω–¥—Ä–∞ 0,5 1200‚ÇΩ, 1 –ª–∏—Ç—Ä 2400‚ÇΩ
–•–∞—Å–∫–∏ 0,5 1200‚ÇΩ, 0,7 1500‚ÇΩ, 1 –ª–∏—Ç—Ä 2400‚ÇΩ
–ê–ú–ì —É–≥–æ–ª—å–Ω–∞—è 0,5 1200‚ÇΩ, –ª–∏—Ç—Ä 2400‚ÇΩ
–î–∞—Ä—Ö–∞–Ω 0,5 2000‚ÇΩ
–§–∏–Ω–ª—è–Ω–¥–∏—è 0,5 2500‚ÇΩ, 0,7 3500‚ÇΩ, 1 –ª–∏—Ç—Ä 5000‚ÇΩ
–ê–±—Å–æ–ª—é—Ç 0,5 3000‚ÇΩ, 1 –ª–∏—Ç—Ä 5000‚ÇΩ
–ë–µ–ª—É–≥–∞ 0,5 2400‚ÇΩ, 1 –ª–∏—Ç—Ä 4000‚ÇΩ
–û–Ω–µ–≥–∏–Ω 07 3000‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ü–∏–≤–æ:
0.33: –∫–æ—Ä–æ–Ω–∞ —ç–∫—Å—Ç—Ä–∞ 400‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –±–∞–¥ 200‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –±–∞–¥ –ª–∞–π—Ç 250‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)‚ùóÔ∏è—Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ üòç
0.5: –∂–∏–≥—É–ª–µ–≤—Å–∫–æ–µ(1978) 200‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –∫–æ–∑–µ–ª —Å–≤–µ—Ç–ª—ã–π 250‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –∫–æ–∑–µ–ª —Ç–µ–º–Ω—ã–π 250‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –æ–∫–æ–º–µ 250‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: –º–∏—Å—Ç–µ—Ä –ª–∏—Å 250‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
0.5: —Ö–∞—Ä–±–∏–Ω 400‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 6 —à—Ç.)
1,5: —á–µ—à—Å–∫–æ–µ (–ë–æ—á–∫–∞—Ä–µ–≤) 400‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 3 —à—Ç.)
1,5: –∂–∏–≥—É–ª–µ–≤—Å–∫–æ–µ (1978) 400‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 3 —à—Ç.)
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–í–∏–Ω–æ, —à–∞–º–ø–∞–Ω—Å–∫–æ–µ, –≤–µ—Ä–º—É—Ç, –∞–ø–µ—Ä–∏—Ç–∏–≤:
–í–∏–Ω–æ –ò—Å–ø–∞–Ω–∏—è: –≠—Å–ø–∞–¥–∞ –î–æ—Ä–∞–¥–∞ (–∫—Ä–∞—Å–Ω–æ–µ –ø/—Å–ª, –±–µ–ª–æ–µ –ø/—Å–ª, –∫—Ä–∞—Å–Ω–æ–µ —Å—É—Ö, –±–µ–ª–æ–µ —Å—É—Ö) 1400‚ÇΩ
–í–∏–Ω–æ –ì—Ä—É–∑–∏—è: –ö–∏–Ω–¥–∑–º–∞—Ä–∞—É–ª–∏ (–∫—Ä/–ø—Å–ª), –ú—É–∫—É–∑–∞–Ω–∏ (–∫—Ä/—Å—É—Ö), –¶–∏–Ω–∞–Ω–¥–∞–ª–∏ (–±–µ–ª/—Å—É—Ö), –ê–ª–∞–∑–∞–Ω—Å–∫–∞—è –¥–æ–ª–∏–Ω–∞ (–±–µ–ª/–ø—Å–ª) 1600‚ÇΩ
–í–µ—Ä–º—É—Ç: –ú–∞—Ä—Ç–∏–Ω–∏ 0,5 2500‚ÇΩ, 1 –ª–∏—Ç—Ä 3800‚ÇΩ
–°–∞–Ω—Ç–∞ –°—Ç–µ—Ñ–∞–Ω–æ (—ç—Ç–æ –≤–µ—Ä–º—É—Ç!!! –ù–µ –∏–≥—Ä–∏—Å—Ç–æ–µ –≤–∏–Ω–æ) 0,75 1500‚ÇΩ, 1 –ª–∏—Ç—Ä 2000‚ÇΩ
–®–∞–º–ø–∞–Ω—Å–∫–æ–µ: –†–æ—Å—Å–∏–π—Å–∫–æ–µ (–±—Ä—é—Ç, –ø/—Å–ª) 1 —à—Ç-1000‚ÇΩ
–ê–±—Ä–∞—É –î—é—Ä—Å–æ (–±—Ä—é—Ç, –ø/—Å–ª) 1 —à—Ç-1300‚ÇΩ
–ê–ø–µ—Ä–∏—Ç–∏–≤: –ê–ø–µ—Ä–æ–ª—å (0,7) - 4000‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ö–æ–Ω—å—è–∫, –±—Ä–µ–Ω–¥–∏:
–ö–∏–Ω–æ–≤—Å–∫–∏–π (0,5) 3* 1800‚ÇΩ, 5* 1900‚ÇΩ
–ó–æ–ª–æ—Ç–∞—è –Ø–∫—É—Ç–∏—è (0,5) 3* 1800‚ÇΩ, 5* 1800‚ÇΩ
–ú–æ–Ω—Ç–µ –ß–æ–∫–æ (0,5) 5* 2000‚ÇΩ
–ê—Ä–º—è–Ω—Å–∫–∏–π (–º–∞—Ç–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞) (0,5) 3*, 5* 2000‚ÇΩ
–ö—É—Ä–≤—É–∞–∑—å–µ VS (0,5) 10000‚ÇΩ
–ö—É—Ä–≤—É–∞–∑—å–µ VS (0,7) 12000‚ÇΩ
–ö—É—Ä–≤—É–∞–∑—å–µ VSOP (0,7) 14000‚ÇΩ
–ú–∞—Ä—Ç–µ–ª—å VS (0,7) 13000‚ÇΩ
–¢–æ—Ä—Ä–µ—Å 5 (0,5) - 3500‚ÇΩ
–¢–æ—Ä—Ä–µ—Å 5 (0,7) - 5000‚ÇΩ
–¢–æ—Ä—Ä–µ—Å 10 (0,5) - 4000‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–í–∏—Å–∫–∏:
Fox&Dogs (0,5)-2000‚ÇΩ
–ë–∞–ª–∞–Ω—Ç–∞–π–∑ (0,5)-4000‚ÇΩ, (0,7)-5000‚ÇΩ
–î–∂–∏–º –ë–∏–º (0,5)-5000‚ÇΩ, (0,7) (–æ–±—ã—á–Ω—ã–π) - 6000‚ÇΩ, (0,7) (—è–±–ª–æ—á–Ω—ã–π, –º–µ–¥–æ–≤—ã–π)-6500‚ÇΩ
–î–∂–µ–∫ –î—ç–Ω–∏–µ–ª—Å (0,5)-5000‚ÇΩ, (0,7) (–æ–±—ã—á–Ω—ã–π, –º–µ–¥–æ–≤—ã–π)-6000‚ÇΩ
–î–∂–µ–º–µ—Å–æ–Ω (0,5)-5000‚ÇΩ, (0,7)-6000‚ÇΩ
–í–∏–ª—å—è–º –õ–æ—É—Å–æ–Ω (0,5)-3000‚ÇΩ, (0,7) - 4000‚ÇΩ
–†–µ–¥ –õ–µ–π–±–ª (0,7) - 5000‚ÇΩ
–ü—Ä–æ–ø–µ—Ä –¢–≤–µ–ª–≤ (0,7) - 6000‚ÇΩ
–ß–∏–≤–∞—Å –†–∏–≥–∞–ª (0,7) - 10000‚ÇΩ
–ß–∏–≤–∞—Å –†–∏–≥–∞–ª 1 –ª - 12000‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–¢–µ–∫–∏–ª–∞, —Ä–æ–º, –∞–±—Å–µ–Ω—Ç, —Å–∞–º–±—É–∫–∞, –¥–∂–∏–Ω:
–û–ª—å–º–µ–∫–∞ –ì–æ–ª–¥ 07 - 8000‚ÇΩ
–û–ª—å–º–µ–∫–∞ –°–∏–ª—å–≤–µ—Ä 07 - 6000‚ÇΩ
–°–∞—É–∑–∞ –°–∏–ª—å–≤–µ—Ä 07 - 8000‚ÇΩ
–ë–∞–∫–∞—Ä–¥–∏ –ö–∞—Ä—Ç–∞ –ë–ª–∞–Ω–∫–∞ 07 - 6000‚ÇΩ
–ë–∞–∫–∞—Ä–¥–∏ –ö–∞—Ä—Ç–∞ –ù–µ–≥—Ä–∞ 07 - 6000‚ÇΩ
–ö–∞–ø–∏—Ç–∞–Ω –ú–æ—Ä–≥–∞–Ω –ë–ª—ç–∫ 07 - 4000‚ÇΩ
–î–∂–∏–Ω –ë–∞—Ä—Ä–∏—Å—Ç–µ—Ä 07 - 2500‚ÇΩ
–î–∂–∏–Ω –ë–∞—Ä—Ä–∏—Å—Ç–µ—Ä –ø–∏–Ω–∫ 07 - 2500‚ÇΩ
–î–∂–∏–Ω –ì–æ—Ä–¥–æ–Ω—Å 07 - 5000‚ÇΩ

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–õ–∏–∫–µ—Ä, –±–∞–ª—å–∑–∞–º:
–Ø–≥–µ—Ä–º–∞—Å—Ç–µ—Ä (0,7) - 5000‚ÇΩ
–ë–µ–π–ª–∏–∑ (0,7) - 5000‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî    `

    b.sendMessage(chatID, text)
}

func (b *OrderBot) sendOrderConfirmation(chatID int64, order orders.Order) {
    text := fmt.Sprintf(`‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %s
–ó–∞–∫–∞–∑: %s
–ê–¥—Ä–µ—Å: %s
–¢–µ–ª–µ—Ñ–æ–Ω: %s

–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
        order.ID, order.Product, order.Address, order.Phone)

    b.sendMessage(chatID, text)
}

func (b *OrderBot) notifyDispatcher(order orders.Order) {
    if b.dispatcherID == 0 {
        return
    }

    text := fmt.Sprintf(`üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó!

–ù–æ–º–µ—Ä: %s
–ö–ª–∏–µ–Ω—Ç: @%s
–ó–∞–∫–∞–∑: %s
–ê–¥—Ä–µ—Å: %s
–¢–µ–ª–µ—Ñ–æ–Ω: %s
–í—Ä–µ–º—è: %s`,
        order.ID, order.Username, order.Product, 
        order.Address, order.Phone, order.CreatedAt.Format("15:04 02.01.2006"))

    b.sendMessage(b.dispatcherID, text)
}

func (b *OrderBot) sendMessage(chatID int64, text string) {
    msg := tgbotapi.NewMessage(chatID, text)
    b.bot.Send(msg)
}

func (b *OrderBot) getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
    return tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üìã –ü—Ä–∞–π—Å"),
            tgbotapi.NewKeyboardButton("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"),
        ),
    )
}

func main() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    botToken := "8409546502:AAHMu4vLc03J-pTXyzcbyvP9TikCVTorllc"
    if botToken == "" {
        log.Fatal("TELEGRAM_BOT_TOKEN environment variable is required")
    }

    // ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dispatcherIDStr := "1155607428"
    var dispatcherID int64 = 0
    if dispatcherIDStr != "" {
        var err error
        dispatcherID, err = strconv.ParseInt(dispatcherIDStr, 10, 64)
        if err != nil {
            log.Printf("Invalid dispatcher ID: %v", err)
        } else {
            log.Printf("Dispatcher notifications enabled for chat ID: %d", dispatcherID)
        }
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot, err := NewOrderBot(botToken, dispatcherID)
    if err != nil {
        log.Fatal(err)
    }

    log.Printf("Authorized on account %s", bot.bot.Self.UserName)
    
    bot.Start()
}
